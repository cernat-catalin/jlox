# A grammar with the following operator precedence:
# 1. Equality       (==, !=)            Left-assoc
# 2. Comparison     (>, >=, <, <=)      Left-assoc
# 3. Term           (+, -)              Left-assoc
# 4. Factor         (*, /)              Left-assoc
# 5. Unary          (!, -)              Right-assoc

# The "declaration" non-terminal is introduced so that we
# can differentiate between different types of expressions,
# so that we can avoid: `if (condition) var a = 12;`


program         -> declaration* EOF

declaration     -> classDecl
                 | funDecl
                 | varDecl
                 | statement;
classDecl       -> "class" IDENTIFIER "{" function* "}"
funDecl         -> "fun" function
function        -> IDENTIFIER "(" parameters? ")" block
parameters      -> IDENTIFIER ("," IDENTIFIER)*
varDecl         -> "var" IDENTIFIER ("=" expression)? ";"

statement       -> exprStmt
                 | forStmt
                 | ifStmt
                 | returnStmt
                 | whileStmt
                 | block
exprStmt        -> expression ";"
forStmt         -> "for" "(" (varDecl | exprStmt | ";")
                   expression? ";"
                   expression? ")" statement
ifStmt          -> "if" "(" expression ")" statement
                   ("else" statement)?
returnStmt      -> "return" expression? ";"
whileStmt       -> "while" "(" expression ")" statement
block           -> "{" declaration* "}"

expression      -> assignment
assignment      -> (call ".")? IDENTIFIER "=" assignment
                 | logic_or
logic_or        -> logic_and ("or" logic_and)*
logic_and       -> equality ("and" equality)*
equality        -> comparison (("!=", "--") comparison)*
comparison      -> term ((">", ">=", "<", "<=") term)*
term            -> factor (("+", "-") factor)*
factor          -> unary (("*", "/") unary)*
unary           -> ("!", "-") unary
                 | call
call            -> primary ("(" arguments? ")" | "." IDENTIFIER)*
arguments       -> expression ("," expression)*
primary         -> NUMBER | STRING | "true" | "false" | "nil"
                 | "(" expression ")"
                 | IDENTIFIER