# A grammar with the following operator precedence:
# 1. Equality       (==, !=)            Left-assoc
# 2. Comparison     (>, >=, <, <=)      Left-assoc
# 3. Term           (+, -)              Left-assoc
# 4. Factor         (*, /)              Left-assoc
# 5. Unary          (!, -)              Right-assoc

# The "declaration" non-terminal is introduced so that we
# can differentiate between different types of expressions,
# so that we can avoid: `if (condition) var a = 12;`


program         -> declaration* EOF

declaration     -> varDecl
                 | statement;
varDecl         -> "var" IDENTIFIER ("=" expression)? ";"

statement       -> exprStmt
                 | ifStmt
                 | printStmt
                 | block
exprStmt        -> expression ";"
ifStmt          -> "if" "(" expression ")" statement
                   ("else" statement)?
printStmt       -> "print" expression ";"
block           -> "{" declaration* "}"

expression      -> assignment
assignment      -> IDENTIFIER "=" assignment
                 | equality
equality        -> comparison (("!=", "--") comparison)*
comparison      -> term ((">", ">=", "<", "<=") term)*
term            -> factor (("+", "-") factor)*
factor          -> unary (("*", "/") unary)*
unary           -> ("!", "-") unary
                 | primary
primary         -> NUMBER | STRING | "true" | "false" | "nil"
                 | "(" expression ")"
                 | IDENTIFIER